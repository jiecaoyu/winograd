from sympy import * 
import numpy
import re


for i in range(8):
    for j in range(8):
        locals()['w_'+str(i)+'_'+str(j)] = Symbol('w_'+str(i)+'_'+str(j))

W = Matrix([
    [w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7],
    [w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7],
    [w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7],
    [w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7],
    [w_4_0, w_4_1, w_4_2, w_4_3, w_4_4, w_4_5, w_4_6, w_4_7],
    [w_5_0, w_5_1, w_5_2, w_5_3, w_5_4, w_5_5, w_5_6, w_5_7],
    [w_6_0, w_6_1, w_6_2, w_6_3, w_6_4, w_6_5, w_6_6, w_6_7],
    [w_7_0, w_7_1, w_7_2, w_7_3, w_7_4, w_7_5, w_7_6, w_7_7],
    ])

for i in range(8):
    for j in range(8):
        locals()['x_'+str(i)+'_'+str(j)] = Symbol('x_'+str(i)+'_'+str(j))

X = Matrix([
    [x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_0_5, x_0_6, x_0_7],
    [x_1_0, x_1_1, x_1_2, x_1_3, x_1_4, x_1_5, x_1_6, x_1_7],
    [x_2_0, x_2_1, x_2_2, x_2_3, x_2_4, x_2_5, x_2_6, x_2_7],
    [x_3_0, x_3_1, x_3_2, x_3_3, x_3_4, x_3_5, x_3_6, x_3_7],
    [x_4_0, x_4_1, x_4_2, x_4_3, x_4_4, x_4_5, x_4_6, x_4_7],
    [x_5_0, x_5_1, x_5_2, x_5_3, x_5_4, x_5_5, x_5_6, x_5_7],
    [x_6_0, x_6_1, x_6_2, x_6_3, x_6_4, x_6_5, x_6_6, x_6_7],
    [x_7_0, x_7_1, x_7_2, x_7_3, x_7_4, x_7_5, x_7_6, x_7_7],
    ])

BT = Matrix([
    [1.,   0.  ,  -21./4.,    0.  ,  21./4. ,    0. ,   -1.,  0.],
    [0. ,  1.   ,   1.    ,-17./4. , -17./4. ,   1.  ,  1.  , 0.],
    [0. ,  -1.  ,   1.    ,17./4.  , -17./4. ,  -1.  ,  1.  , 0.],
    [0. , 1./2. ,   1./4. ,  -5./2.,   -5./4.,     2.,    1.,   0.],
    [0. , -1./2.,   1./4. ,   5./2.,   -5./4.,    -2.,    1.,   0.],
    [0. ,  2.   ,   4.    ,-5./2.  ,  -5.    , 1./2. ,  1.  , 0.],
    [0. ,  -2.  ,   4.    , 5./2.  ,  -5.    ,-1./2. ,  1.  , 0.],
    [0. ,  -1.  ,   0.    ,21./4.  ,   0.    ,-21./4.,  0.  , 1.]]
    )


X_t = BT * X
X_t = X_t * (BT.transpose())


O_t = W.multiply_elementwise(X_t)

AT = Matrix([
    [1.,  1. , 1. ,  1.,  1. ,  8. , 8. ,  0.],
    [0.,  1. , -1.,  2.,  -2.,  4. , -4.,  0.],
    [0.,  1. , 1. ,  4.,  4. ,  2. , 2. ,  0.],
    [0.,  1. , -1.,  8.,  -8.,  1. , -1.,  1.]]
    )

O = AT * O_t
O = O * (AT.transpose())

O = Matrix(Matrix(O).expand())

threshold = numpy.zeros([8,8])
for index in range(16):
    out = str(O[index])
    items = re.split(' + | - ', out)
    for item in items:
        l = item.split('*')
        weight = float(l[0]) ** 2.0
        w_index = l[1].split('_')
        threshold[int(w_index[1])][int(w_index[2])] += weight
print threshold**0.5
